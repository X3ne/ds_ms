syntax = "proto3";

package channels.v1;

import "buf/validate/validate.proto";

service ChannelsService {
  rpc Create (CreateRequest) returns (CreateResponse) {}
  rpc GetById (GetByIdRequest) returns (GetByIdResponse) {}
  rpc Update (UpdateRequest) returns (UpdateResponse) {}
  rpc Delete (DeleteRequest) returns (DeleteResponse) {}
}

enum ChannelType {
  GUILD_TEXT = 0;
  DM = 1;
  GUILD_VOICE = 2;
  GROUP_DM = 3;
  GUILD_CATEGORY = 4;
}

message Channel {
  int64           id = 1;
  string          name = 2;
  ChannelType     type = 3;
  int64           guild_id = 4;
  int32           position = 5;
  string          topic = 6;
  string          icon = 7;
  int32           user_limit = 8;
  repeated int64  recipients = 9;
  int64           owner_id = 10;
  int64           parent_id = 11;
  string          permissions = 12;
  int64           last_message_id = 13;
  bool            is_nsfw = 14;
  bool            is_voice = 15;
  int64           created_at = 16;
  int64           updated_at = 17;
}

message CreateRequest {
  string  name = 1 [(buf.validate.field).string.min_len = 2, (buf.validate.field).string.max_len = 100];
  int64   owner_id = 3 [(buf.validate.field) = {
    int64: {
      gt: 0,
    }
  }];
  int64   guild_id = 4 [(buf.validate.field) = {
    int64: {
      gt: 0,
    }
    ignore_empty: true,
  }];
  ChannelType type = 5 [(buf.validate.field) = {
    enum: {
      defined_only: true,
    }
  }];
  string  topic = 6 [(buf.validate.field) = {
    string: {
      max_len: 1024,
    }
    ignore_empty: true,
  }];
  int32   position = 7 [(buf.validate.field) = {
    int32: {
      gte: 0,
    }
    ignore_empty: true,
  }];
  bool    is_nsfw = 8 [(buf.validate.field) = {
    bool: {}
    ignore_empty: true,
  }];
  bool    is_voice = 9 [(buf.validate.field) = {
    bool: {}
    ignore_empty: true,
  }];
  int64   parent_id = 10 [(buf.validate.field) = {
    int64: {
      gt: 0,
    }
    ignore_empty: true,
  }];
  int32   user_limit = 11 [(buf.validate.field) = {
    int32: {
      gt: 0,
    }
    ignore_empty: true,
  }];
  repeated int64 recipients = 12 [(buf.validate.field) = {
    int64: {
      gt: 0,
    }
    ignore_empty: true,
  }];
}

message CreateResponse {
  Channel channel = 1;
}

message GetByIdRequest {
  int64 id = 1 [(buf.validate.field).int64.gt = 0];
}

message GetByIdResponse {
  Channel channel = 1;
}

message UpdateRequest {
  int64   id = 2 [(buf.validate.field).int64.gt = 0];
  string  name = 3 [(buf.validate.field) = {
    string: {
      min_len: 2,
      max_len: 100,
    }
  }];
  ChannelType type = 4 [(buf.validate.field) = {
    enum: {
      defined_only: true,
    }
  }];
  string  topic = 5 [(buf.validate.field) = {
    string: {
      max_len: 1024,
    }
    ignore_empty: true,
  }];
  int32   position = 6 [(buf.validate.field) = {
    int32: {
      gte: 0,
    }
    ignore_empty: true,
  }];
  bool    is_nsfw = 7 [(buf.validate.field) = {
    bool: {}
    ignore_empty: true,
  }];
  int64   parent_id = 9 [(buf.validate.field) = {
    int64: {
      gt: 0,
    }
    ignore_empty: true,
  }];
  int32   user_limit = 10 [(buf.validate.field) = {
    int32: {
      gt: 0,
    }
    ignore_empty: true,
  }];
  repeated int64 recipients = 11 [(buf.validate.field) = {
    int64: {
      gt: 0,
    }
    ignore_empty: true,
  }];
}

message UpdateResponse {
  Channel channel = 1;
}

message DeleteRequest {
  int64 id = 1 [(buf.validate.field).int64.gt = 0];
}

message DeleteResponse {
  bool  success = 1;
}
